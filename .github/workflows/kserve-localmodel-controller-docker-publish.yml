name: Kserve localmodel controller Docker Publisher

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: kserve-localmodel-controller

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker buildx build . --file localmodel.Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: export version variable
        run: |
          if [[ "${GITHUB_REPOSITORY}" == "kserve/kserve" ]]; then
            REGISTRY="docker.io"
            IMAGE_ID="kserve/${IMAGE_NAME}-$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)"
            REGISTRY_USER="${{ secrets.DOCKER_USERNAME }}"
            REGISTRY_PASS="${{ secrets.DOCKER_PASSWORD }}"
          else
            REGISTRY="quay.io"
            IMAGE_ID="quay.io/${{ vars.QUAY_OWNER }}/$IMAGE_NAME"
            REGISTRY_USER="${{ secrets.QUAY_USER }}"
            REGISTRY_PASS="${{ secrets.QUAY_PASSWORD }}"
          fi

          # Normalize image ID
          IMAGE_ID=$(echo "$IMAGE_ID" | tr '[A-Z]' '[a-z]')

          # Derive version from ref
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "master" ] && VERSION="latest"
          [[ "$VERSION" =~ ^release- ]] && VERSION=$(echo "$VERSION" | sed 's/^release-//')-latest

          # Start tag list
          TAGS="$IMAGE_ID:$VERSION"

          # Add vX.Y fallback tag if version matches vX.Y.Z
          [[ "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] && \
            TAGS="$TAGS,$IMAGE_ID:$(echo $VERSION | sed 's/\(.*\)\.[[:digit:]]\+$/\1/')"

          # Export env vars
          echo "REGISTRY=$REGISTRY" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_ID=$IMAGE_ID" >> $GITHUB_ENV
          echo "CONTAINER_TAGS=$TAGS" >> $GITHUB_ENV
          echo "REGISTRY_USER=$REGISTRY_USER" >> $GITHUB_ENV
          echo "REGISTRY_PASS=$REGISTRY_PASS" >> $GITHUB_ENV

      - name: Login to container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASS }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm/v7,linux/arm64/v8,linux/ppc64le,linux/s390x
          context: .
          file: localmodel.Dockerfile
          push: true
          tags: ${{ env.CONTAINER_TAGS }}
          # https://github.com/docker/buildx/issues/1533
          provenance: false
